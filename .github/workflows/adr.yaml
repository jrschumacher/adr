name: ADR

permissions:
#   actions: read|write|none
#   checks: read|write|none
#   contents: read|write|none
#   deployments: read|write|none
#   id-token: read|write|none
  issues: write
#   discussions: read|write|none
#   packages: read|write|none
#   pages: read|write|none
#   pull-requests: read|write|none
#   repository-projects: read|write|none
#   security-events: read|write|none
#   statuses: read|write|none

on:
  workflow_dispatch:
    inputs:
      command:
        description: 'Choose command to run'
        required: true
        default: 'warning'
        type: choice
        options: [init]
  issue_comment: 
    types: [created]
  issues:
    types: [opened]
    
jobs:
  ## Handle Command Job
  ## Runs when workflow dispatch is triggered
  handle_command:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Init Command
        if: ${{ inputs.command == 'init' }}
        uses: actions/github-script@v6
        with:
          script: |
            // On init we need to setup the repo to support the MADR process
            // This includes:
            //   - create labels
            const labels = [
              {
                name: 'adr',
                description: 'Main ADR label',
                color: '1D76DB'
              },
              {
                name: 'adr:draft', 
                description: 'ADR in draft mode',
                color: 'FBCA04'
              },
              {
                name: 'adr:approved', 
                description: 'ADR has been approved',
                color: '0E8A16'
              },
              {
                name: 'adr:rejected', 
                description: 'ADR has been rejected',
                color: 'B60205'
              },
              {
                name: 'adr:deprecated', 
                description: 'ADR has been deprecated',
                color: 'F9D0C4'
              },
              {
                name: 'adr:superceded', 
                description: 'ADR has been superceded',
                color: 'FEF2C0'
              },
            ]
            
            console.log('Fetching existing labels...')
            const listLabels = await github.rest.issues.listLabelsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            
            let foundLabels = 0
            let createdLabels = 0
            console.log('Checking if labels need to be created...')
            const needLabels = labels.forEach(async ({ name, description, color }) => {
              const found = listLabels?.data?.find(label => label.name === name)
              
              if (found) {
                return foundLabels++
              }
              
              console.log(`Label ${name} was not found. Creating...`)
              createdLabels++
              await github.rest.issues.createLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name, description, color
              })
            })
            console.log(`Labels found: ${foundLabels} and created: ${createdLabels}`)

  handle_issue:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'issues' }}
    steps:
    - name: Handle New Issue
      if: ${{ github.event.action == 'opened' }}
      uses: actions/github-script@v6
      with:
        script: |
          // On a new issue we want to add the first comment so we can keep track of events
          console.log('Make sure the issue is an adr')
          if (!context.payload.issue.labels.find(({ name }) => name === 'adr')) return
          
          const tplLog = ```
            ℹ️ _This issue is used to keep track of the events related to this ADR_
            ---
            \`\`\`
            deciders:
            approvals:
            rejections:
            status: draft
            \`\`\`
          ```
          
          console.log('Create the first comment')
          for (let i in github.rest.issues) console.log(i)
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: tmpLog
          })
            
    
  ## Handle Comment Job
  # Runs when a comment is added
  handle_comment-request_approval:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'issue_comment' }}
    steps:
    - name: Handle Request Approval
      if: ${{ github.event.action == 'created' && startsWith(github.event.comment.body, 'adr') }}
      uses: actions/github-script@v6
      with:
        script: |
          const validUsername = /^@[a-z\d](?:[a-z\d]|-(?=[a-z\d])){0,38}$/i;
          
          const requestApprovalRegex = new Regexp(
          
          let comment = context.event?.comment?.body || ''
          
          // Strip prefix and trim
          comment = comment.replace(/^adr (.*)/, '$1').trim()
          
          // Bail if comment is empty
          if (commment === '') return
          
          if (comment.match(/^request approval( $valid*/)
  
