name: ADR

permissions:
#   actions: read|write|none
#   checks: read|write|none
#   contents: read|write|none
#   deployments: read|write|none
#   id-token: read|write|none
  issues: write
#   discussions: read|write|none
#   packages: read|write|none
#   pages: read|write|none
#   pull-requests: read|write|none
#   repository-projects: read|write|none
#   security-events: read|write|none
#   statuses: read|write|none

on:
  workflow_dispatch:
    inputs:
      command:
        description: 'Choose command to run'
        required: true
        default: 'warning'
        type: choice
        options: [init]
  issue_comment: 
    types: [created]
  issues:
    types: [opened]
    
jobs:
  ## Handle Command Job
  ## Runs when workflow dispatch is triggered
  handle_command:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Init Command
        if: ${{ inputs.command == 'init' }}
        uses: actions/github-script@v6
        with:
          script: |
            // On init we need to setup the repo to support the MADR process
            // This includes:
            //   - create labels
            const labels = [
              {
                name: 'adr',
                description: 'Main ADR label',
                color: '1D76DB'
              },
              {
                name: 'adr:draft', 
                description: 'ADR in draft mode',
                color: 'FBCA04'
              },
              {
                name: 'adr:approved', 
                description: 'ADR has been approved',
                color: '0E8A16'
              },
              {
                name: 'adr:rejected', 
                description: 'ADR has been rejected',
                color: 'B60205'
              },
              {
                name: 'adr:deprecated', 
                description: 'ADR has been deprecated',
                color: 'F9D0C4'
              },
              {
                name: 'adr:superceded', 
                description: 'ADR has been superceded',
                color: 'FEF2C0'
              },
            ]
            
            console.log('Fetching existing labels...')
            const listLabels = await github.rest.issues.listLabelsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            
            let foundLabels = 0
            let createdLabels = 0
            console.log('Checking if labels need to be created...')
            const needLabels = labels.forEach(async ({ name, description, color }) => {
              const found = listLabels?.data?.find(label => label.name === name)
              
              if (found) {
                return foundLabels++
              }
              
              console.log(`Label ${name} was not found. Creating...`)
              createdLabels++
              await github.rest.issues.createLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name, description, color
              })
            })
            console.log(`Labels found: ${foundLabels} and created: ${createdLabels}`)

  handle_issue:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'issues' }}
    steps:
    - name: Handle New Issue
      if: ${{ github.event.action == 'opened' }}
      uses: actions/github-script@v6
      with:
        script: |
          // On a new issue we want to add the first comment so we can keep track of events
          console.log('Make sure the issue is an adr')
          if (!context.payload.issue.labels.find(({ name }) => name === 'adr')) return
          
          const tplLog = [
            '<details><summary>‚ÑπÔ∏è ADR Status: draft</summary>',
            '```',
            '',
            'deciders:',
            'approvals:',
            'rejections:',
            'status: draft',
            '```',
            '',
            '</details>',
            '',
            '---',
            '',
            '_This comment is used to keep track of the events related to this ADR_'
          ].join('\n')
          
          console.log('Create the first comment', tplLog)
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: tplLog
          })
            
    
  ## Handle Comment Job
  # Runs when a comment is added
  handle_comment-request_approval:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'issue_comment' }}
    steps:
    - name: Handle Request Approval
      if: ${{ github.event.action == 'created' && startsWith(github.event.comment.body, 'adr') }}
      uses: actions/github-script@v6
      with:
        script: |
          const statePending = 'pending'
          const stateAccepted = 'accepted'
          const stateRejected = 'rejected'
          const stateDeprecated = 'deprecated'
          const stateSuperseded = 'superseded'

          const cmdRequestApproval = 'request-approval'
          const cmdApprove = 'approve'
          const cmdReject = 'reject'

          const validUsername = '@[a-z\d](?:[a-z\d]|-(?=[a-z\d])){0,38}'

          const ghComment = (...msg) => {
            github.rest.issues.createComment({
              repo: context.repo.repo,
              owner: context.repo.owner,
              issue_number: context.issue.number,
              body: body.join('\n')
            })
          }

          const fmtMessage = (...p) => p.map(a => typeof a == 'string'  && a || '').join('/n')
          const errComment = (summary, ...detail) => fmtMessage(
            `<details><summary>‚ùó @${github.actor} ${summary}</summary>`,
            ...detail,
            `</details>`,
          )

          const findStatusComment = async () => {
            console.log('Finding status comment')
            const comments = await github.rest.issues.listComments({
              repo: context.repo.repo,
              owner: context.repo.owner,
              issue_number: context.issue.number,
              per_page: 100, // max
            })
            console.log(comments)

            return comments.data.find(c =>
              c.user.login == 'github-actions[bot]' &&
              c.body.startsWith('<detail><summary>‚ÑπÔ∏è ADR Status')
            )
          }

          const updateStatus = async (status) => {
            console.log('Updating status comment')
            const comment = await findStatusComment()
            if (!comment) {
              console.log('No status comment found')
              return
            }

            let head, body, footer
            [head, body] = comment.body.split('</summary>')[1]
            [body, footer] = body.split('</details>')[0]
            body = body.split('```')[1]

            const [deciders, approvals, rejections, status] = body.split('\n')

          }

          const comment = (context.event?.comment?.body || '').replace(/^adr (.*)/, '$1').trim()
          // Bail if comment is empty
          if (commment === '') return

          // Request approval flow
          const requestApproval = comment.match(new Regexp(`^request approval(( ${validUsername})*)$`, 'i'))
          if (requestApproval) {
            usernames = requestApproval[1].trim().split(' ')

            if (usernames.length === 0) return ghComment(errComment(
              'Please specify at least one user to request approval from.',
              'Example: \`adr request approval @user1 @user2\`',
            ))

            ghComment(fmtMessage(
              `@${usernames.join(' ')} Please review this ADR.`,
              '',
              '---',
              '',
              '- üëç To **approve** this ADR, comment:',
              '  -`adr approve`',
              '- üëé To **reject** this ADR, comment:',
              '  -`adr reject`',
            ))
          }

          // Approve flow
          const approve = comment.match(/^approve$/i)
          if (approve) {
            // Do something

            return
          }

          // Reject flow
          const reject = comment.match(/^reject$/i)
          if (reject) {

            return
          }
  
