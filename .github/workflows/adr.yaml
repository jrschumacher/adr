name: ADR

permissions:
#   actions: read|write|none
#   checks: read|write|none
#   contents: read|write|none
#   deployments: read|write|none
#   id-token: read|write|none
  issues: write
#   discussions: read|write|none
#   packages: read|write|none
#   pages: read|write|none
#   pull-requests: read|write|none
#   repository-projects: read|write|none
#   security-events: read|write|none
#   statuses: read|write|none

on:
  workflow_dispatch:
    inputs:
      command:
        description: 'Choose command to run'
        required: true
        default: 'warning'
        type: choice
        options: [init]
  issue_comment: 
    types: [created]
  issues:
    types: [opened]
    
jobs:
  ## Handle Command Job
  ## Runs when workflow dispatch is triggered
  handle_command:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Init Command
        if: ${{ inputs.command == 'init' }}
        uses: actions/github-script@v6
        with:
          script: |
            // On init we need to setup the repo to support the MADR process
            // This includes:
            //   - create labels
            const labels = [
              {
                name: 'adr',
                description: 'Main ADR label',
                color: '1D76DB'
              },
              {
                name: 'adr:draft', 
                description: 'ADR in draft mode',
                color: 'FBCA04'
              },
              {
                name: 'adr:approved', 
                description: 'ADR has been approved',
                color: '0E8A16'
              },
              {
                name: 'adr:rejected', 
                description: 'ADR has been rejected',
                color: 'B60205'
              },
              {
                name: 'adr:deprecated', 
                description: 'ADR has been deprecated',
                color: 'F9D0C4'
              },
              {
                name: 'adr:superceded', 
                description: 'ADR has been superceded',
                color: 'FEF2C0'
              },
            ]
            
            console.log('Fetching existing labels...')
            const listLabels = await github.rest.issues.listLabelsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            
            let foundLabels = 0
            let createdLabels = 0
            console.log('Checking if labels need to be created...')
            const needLabels = labels.forEach(async ({ name, description, color }) => {
              const found = listLabels?.data?.find(label => label.name === name)
              
              if (found) {
                return foundLabels++
              }
              
              console.log(`Label ${name} was not found. Creating...`)
              createdLabels++
              await github.rest.issues.createLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name, description, color
              })
            })
            console.log(`Labels found: ${foundLabels} and created: ${createdLabels}`)

  handle_issue:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'issues' }}
    steps:
    - name: Handle New Issue
      if: ${{ github.event.action == 'opened' }}
      uses: actions/github-script@v6
      with:
        script: |
          // On a new issue we want to add the first comment so we can keep track of events
          console.log('Make sure the issue is an adr')
          if (!context.payload.issue.labels.find(({ name }) => name === 'adr')) return
          
          const tplLog = [
            '<details><summary>ℹ️ ADR Status: draft</summary>',
            '```',
            '',
            'deciders:',
            'approvals:',
            'rejections:',
            'status: draft',
            '```',
            '',
            '</details>',
            '',
            '---',
            '',
            '_This comment is used to keep track of the events related to this ADR_'
          ].join('\n')
          
          console.log('Create the first comment', tplLog)
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: tplLog
          })
            
    
  ## Handle Comment Job
  # Runs when a comment is added
  handle_comment-request_approval:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'issue_comment' }}
    steps:
    - name: Handle Request Approval
      if: ${{ github.event.action == 'created' && startsWith(github.event.comment.body, 'adr') }}
      uses: actions/github-script@v6
      with:
        script: |
          const statePending = 'pending'
          const stateAccepted = 'accepted'
          const stateRejected = 'rejected'
          const stateDeprecated = 'deprecated'
          const stateSuperseded = 'superseded'

          const cmdPrefix = 'adr'
          const cmdRequestApproval = 'request-approval'
          const cmdApprove = 'approve'
          const cmdReject = 'reject'

          const validUsername = '@[a-z\d](?:[a-z\d]|-(?=[a-z\d])){0,38}'
          
          const commentBody = context.payload.comment.body
          const commentActor = context.payload.comment.user.login

          const fmtMessage = (...msg) => msg.map(l => typeof l == 'string' && l || '').join("\n")

          const ghComment = (...msg) => github.rest.issues.createComment({
            repo: context.repo.repo,
            owner: context.repo.owner,
            issue_number: context.issue.number,
            body: fmtMessage(...msg),
          })

          const ghUpdateComment = (comment_id, ...msg) => github.rest.issues.updateComment({
            repo: context.repo.repo,
            owner: context.repo.owner,
            issue_number: context.issue.number,
            comment_id,
            body: fmtMessage(...msg),
          })

          const errComment = (summary, ...detail) => ghComment(
            `<details><summary>❗ @${commentActor} ${summary}</summary>`,
            '',
            '---',
            '',
            ...detail,
            `</details>`,
          )

          async function updateState(commentId, status, deciders, approvals, rejections) {
            console.log('Updating state')
            return ghUpdateComment(commentId, 
              `<details><summary>ℹ️ ADR Status: ${status}</summary>`,
              '',
              '```',
              `deciders: ${deciders.join(' ')}`,
              `approvals: ${approvals.join(' ')}`,
              `rejections: ${rejections.join(' ')}`,
              `status: ${status}`,
              '```',
              '',
              `</details>`
            )
          }

          async function getState() {
            let comment = null
            let deciders = []
            let approvals = []
            let rejections = []
            let status = ''

            console.log('Finding status comment')
            // TODO: Support pagination of the GH comments
            comment = await github.rest.issues.listComments({
              repo: context.repo.repo,
              owner: context.repo.owner,
              issue_number: context.issue.number,
              per_page: 100, // max
            }).data.find(c =>
              c.user.login == 'github-actions[bot]' &&
              c.body.startsWith('<detail><summary>ℹ️ ADR Status')
            )

            if (!comment) throw new Error('No state comment found')

            console.log('Found state comment', comment.id)
            [deciders, approvals, rejections, status] = comment.body
              .split('```')[1]
              .trim()
              .split('\n')
              .map(l =>
                l.split(':')[1]
                  .trim('')
                  .split(' ')
              )
            return { commentId: comment.id, deciders, approvals, rejections, status }
          }

          async function updateStatus(status, params) {
            console.log('Updating state comment')
            let state = {};
            try {
              state = await getState(comment.body)
            } catch (e) {
              console.error('Error getting state', e)
              return
            }

            switch (status) {
              case statePending:
                const currDeciders = new Set(deciders.split(' '))
                if (Array.isArray(params.decider)) {
                  params.deciders.map(decider => currDeciders.add(decider))
                  nextDeciders = Array.from(currDeciders).join(' ')
                  nextApprovals = params.approvals.join(' ')
                  nextRejections = params.rejections.join(' ')
                }
                break
              case stateAccepted:
                const currApprovals = new Set(approvals.split(' '))
                if (Array.isArray(params.approver)) {
                  params.approver.map(approver => currApprovals.add(approver))
                  nextApprovals = Array.from(currApprovals).join(' ')
                }
                break
              case stateRejected:
                const currRejections = new Set(rejections.split(' '))
                if (Array.isArray(params.rejector)) {
                  params.rejector.map(rejector => currRejections.add(rejector))
                  nextRejections = Array.from(currRejections).join(' ')
                }
                break
            }

            if (approvals.length == deciders.length) {
              nextStatus = stateAccepted
            } else if (rejections.length == deciders.length) {
              nextStatus = stateRejected
            } else {
              nextStatus = statePending
            }

            updateState(state.commentId, nextStatus, nextDeciders, nextApprovals, nextRejections)
          }
          
          console.log('Processing command', commentBody)
          // adr cmd [params]
          const reCmd = new RegExp(`^${cmdPrefix} ([^ ]+)((?: [^ ]+)*)?`);
          const cmdComment = commentBody?.trim().match(reCmd)
          // Bail if comment is empty
          if (!cmdComment) return errComment('No command found')
          let [_, cmd, params] = cmdComment
          params = params?.trim().split(' ') || []

          console.log(`Processing command from ${commentActor}`, cmd, params)
          switch (cmd) {
            case cmdRequestApproval:
              console.log('Requesting approval')
              if (params.length === 0) return errComment(
                'Please specify at least one user to request approval from.',
                `Example: \`${cmdPrefix} ${cmdRequestApproval} @user1 @user2\``,
              )

              const invalid = params.filter(p => !p.match(validUsername))
              if (invalid.length > 0) return errComment(
                `Invalid username(s) in request: ${invalid.join(' ')}`,
                'Valid usernames must start with `@` and contain only alphanumeric characters or hyphens, and cannot end with a hyphen.',
              )

              updateStatus(statePending, { deciders: usernames, approvals: [], rejections: [] })

              ghComment(fmtMessage(
                `@${usernames.join(' ')} Please review this ADR.`,
                '',
                '---',
                '',
                '- 👍 To **approve** this ADR, comment:',
                `  - \`${cmdPrefix} ${cmdReject}\``,
                '- 👎 To **reject** this ADR, comment:',
                `  - \`${cmdPrefix} ${cmdReject}\``,
              ))
              break
            case cmdApprove:
              console.log('Approving')
              updateStatus(stateAccepted, { approver: commentActor })
              break
            case cmdReject:
              console.log('Rejecting')
              updateStatus(stateRejected, { rejector: commentActor })
              break
            default:
              console.log('Unknown command')
              errComment(
                `Unknown command \`${cmd}\`.`,
                `Unknown command: \`${commentBody}\``,
                `Please use one of the following commands:`,
                `- \`${cmdPrefix} ${cmdRequestApproval} @user1 @user2\``,
                `- \`${cmdPrefix} ${cmdApprove}\``,
                `- \`${cmdPrefix} ${cmdReject}\``,
              )
              break
          }
